def classify_material(image: Tensor) -> MaterialClassification:

    '''
    This function classifies the material of an object in the given image using TensorFlow and PyTorch.

    # Example

    ```python
    import tensorflow as tf
    import torch

    # Load the user-generated image into a variable:
    image = load_image_from_cleanapp()

    # Use TensorFlow to classify the material of the object in the image:
    tf_session = tf.Session(graph=tf.Graph())
    tf_model = TensorFlowModel.from_saved_model("material_classification_model.pb")
    tf_material_classification = tf_model.predict(tf_session, image)

    # Use PyTorch to classify the material of the object in the image:
    pt_model = torch.load("material_classification_model.pt")
    pt_model.eval()
    pt_material_classification = pt_model(image)

    # Return the material classification to CleanApp:
    return MaterialClassification(
        tf_classification=tf_material_classification,
        pt_classification=pt_material_classification
    )
    ```

    # Returns

    A `MaterialClassification` object containing the material classification provided by TensorFlow and PyTorch.
    '''

# Import the necessary libraries:
import tensorflow as tf
import torch

# Load the user-generated image into a variable:
image = load_image_from_cleanapp()

# Use TensorFlow to classify the material of the object in the image:
with tf.Session() as sess:
  # Load the pre-trained TensorFlow model:
  model = tf.saved_model.load("material_classification_model.pb")

  # Run the model on the image to get the material classification:
  material_classification = model.predict(image)

# Use PyTorch to classify the material of the object in the image:
with torch.no_grad():
  # Load the pre-trained PyTorch model:
  model = torch.load("material_classification_model.pt")

  # Run the model on the image to get the material classification:
  material_classification = model(image)

# Return the material classification to CleanApp:
return material_classification
